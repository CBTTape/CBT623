/*REXX*/
/* PROGRAM: AUTOIPL
   Purpose: Automatic IPL and Shutdown procedure.
   Syntax : AUTOIPL
            All commands should be put in SYSIN DD.
   Example: See below.

AUTOIPL USER GUIDE
==================

Introduction
------------
  AUTOIPL is a package to automate your shutdown and IPL procedure.
This package is a free license and open source package.

The package has following feature:
  1. Automatic shutdown the system in proper sequence.
     After a single command (S SHUTDOWN), the system will be completely
     shutdown and ready to power off or re-IPL.

  2. Safe to shutdown.
     As AUTOIPL will not shutdown until all running tasks are stopped,
     It's safe by issuing the command by mistake.

  3. Proper Messages.
     The package will show the proper messages to indicate the
     status of the procedure.

  4. Automatic IPL
     After system IPLed, the start tasks will be started in proper
     sequence. There is no user intervention required.

Comments
--------
 Any words beyond '#' will be comments and ignored.
 You can put a '#' at the beginning of the line to comment it out.
 Or. you can put comments at the end of statements.

 Examples:

 # First Phase: stop most applications.
 # ...
 # Wait 1 minute.
 WAIT 60
 ...
 P TCPIP      # Stop TCP/IP and TCP/IP dependent tasks.

 Any space before or after each command will be ignored.
 Any empty line will be ignored.

MVS Commands
------------
 Each MVS command must be within 70 charaters.
 The AUTOIPL will check the command length and ignore the command
 exceeds 70 characters.

Statements
----------
 You can put commands in multiple line, for example:
         STOP(NPFFWTR ,'$PPRT6',
                       '$PPRT7',
                       '$PPRT8')
 You must put comma(,) to tell the command continues next line.
 This example is the same as:
         STOP(NPFFWTR ,'$PPRT6','$PPRT7','$PPRT8')

Special Commands
----------------
 Normally, the statements are treated as MVS system command and
 AUTOIPL will issue it for to system.

 There are some special statements.

 a. WAIT

    If you need to wait, code following line:
       WAIT
    or WAIT seconds

    Specify wait time in seconds, i.e. 'WAIT 300' for 5 minutes.

    There is a special function for WAIT statement. The WAIT statement
    will also check the completion of previous commands.
    For shutdown, the WAIT will tell AUTOIPL to wait for the termination
    of all tasks issued by STOP commands.

    You should use WAIT command when you need to stop tasks in sequence.

    i.e. Stop RMF TCP/IP Server before stop RMF:

    P GPMSERVE     # issue STOP RMF TCP/IP Server command
    WAIT 30        # WAIT at leat 30 seconds and checking GMPSERVE.
    P RMF          # stop RMF and RMF III

 b. END

    If you need to specify end of the parameter member explicitely,
    use following statement:
       END
    Any line beyond this line will be ignored.


 c. REPLY or R

    If you need to stop address space by REPLY command,
    you can specify them by keyword instead of reply number.
        R keyword,command
    For example:
        R EZY0960I,STOP
    The program will look up the keyword 'EZY0960I' and it's reply
    number in reply list, and replace the keyword with the number nn,
    and issue the MVS command:
        R nn,STOP

    If the keyword is a number, the program will not
    translate it, it will issue it as a REPLY command.

    If the keyword is a string with space or comma,
    use quote around the keyword, i.e.:
        R 'JES328Z - ENTER COMMAND',END

 c. STOP

    If you need to issue some special command to shutdown some tasks,
    use following format:

        STOP(addrname,'command1','command2',CHECK/NOCHECK)

    addrname is the address space name to stop,
    if this is a hook, just code the start task name.
    The default option is CHECK, which will check if the given
    task is running for STOP/MODIFY/CANCEL commands. If the
    task is not running and option is CHECK or omitted,
    these commands will not be issued.
    For some special tasks (FFST), you need code NOCHECK to
    provent checking FFST's running status before issuing the
    STOP command because the task name for FFST is EPWFFST.
    for example:
          i.  STOP(NPFFWTR,'$PPRT6','$PPRT7','$PPRT8')

         ii.  STOP(DMSAR   ,'S DMSAR,DMSAR=REMOVE')
            DMSAR is a hook, the program will wait until this
            DMSAR started task stops.

        iii.  STOP(none    ,'P FFST',NOCHECK)
              WAIT 10
              STOP(EPWFFST ,'R EPW0309I,YES')

            Issue STOP FFST, then FFST will issue a reply message,
            Wait 10 seconds, and reply the message as 'YES'.

 e. If you need to wait some task to stop/start without issuing
    any command (command may be issued before), use following
    comamnd:
              WAIT(taskname, STOP/START)
    The program will detect and wait till the taskname is started or
    stopped.
    This feature is useful for those tasks needs a long time to stop.

    Example:
        STOP(NONE, 'P SLS0')
         ...
        WAIT(60)
         ...
        WAIT(SLS0, STOP)
         ...
        WAIT(10)
          This technique will use 2 or more stages to allow the task
          to stop.
 f WTO and WTOH
   If you need to write console message, use command:
        WTO('message')
    or
        WTO(message)
   You can use WTOH to issue high light messages


Configuration Statements
------------------------

   There are some settings control how the program runs.

        CONFIG(keyword)= value

   keyword are:
     a.OPTION   The options are :
                IPL           : Tell this is a IPL procedure
                SHUTDOWN      : Tell this is a SHUTDOWN procedure
                VALIDATE_ONLY : Validate the commands only.
                                No MVS command will be issued.
                                This is for test purpose.
                The default value is none.

     b.TIMEOUT  The timeout value in seconds.
                The timeout will be used for waiting for task to stop
                The default timeout is 300

     c.EXCLUDE_TASK  This is the address space name which will be
                excluded when the program checking running task.
                You can specify multiple EXCLUDE_TASK.
                The default tasks are FTPD, INETD and SYSLOGD
                These tasks normally are TSO or BATCH jobs.

   For shutdown, the AUTOIPL will check if there is any running
   jobs. If any, it will issue a console message to show the running
   task, and check it every 1 minute. All commands will not be issued
   until these running tasks stops.

   For some environment, there are some running batch jobs or TSO
   users as part of system running task, not user batch jobs.
   The example are TCP/IP FTPD, INETD and SYSLOGD.
   In order to bypass checking these tasks, you need to use
   CONFIG(EXCLUDE_TASK) to bypass them at shutdown parameter member.

   The CONFIG statement can be anywhere in the parameter member.

Questions & suggestions
=======================
 Should you have any question, please contact Hunter Zhou at
 zhough2000@yahoo.com

 April, 2003

 Hunter Guanghui Zhou
 Phone: 1-(416)-602-9567
 E-mail: zhough2000@yahoo.com

*/
main:
  parse arg mainargs
  x=Initialization()
  Code=Read_Parameters(mainargs)
  if Code\=0 then call Program_Ends(Code)
  Code=Process_Inputs()
  call Program_Ends(Code)
/* End of Main Program */

/*===================================================================*/
Initialization:

  TimeOut = 300      /* default timeout in seconds. */
  /* Put all job exclusion list here.
     All jobs listed here will be ignored when detecting
     running jobs. This is for SHUTDOWN validation.
  */
  drop JobExcludeList. StartCmds.
  JobExcludeList.0 = 0    /* Total Number of exclusion job names. */
  Code=0                  /* Maximum return code */
  Title='AUTOIPL Software'
  x=WriteLog('ATI000I Welcome to 'Title)
  x=WriteLog('ATI000I Author: Hunter Zhou             ')
  x=WriteLog('ATI000I Contact: zhough2000@yahoo.com.    ')
  x=WriteLog('ATI000I Update: November, 2003')

return 0

/*===================================================================*/
Read_Parameters:
  parse arg args
  rcode=0
  drop Lines.
  if args \= '' then do /* one command is provided in command option.*/
    args = strip(args)
    upper args
    StartCmds.0 = 1
    StartCmds.1 = args
    return rcode
  end
  if \CheckDDName('SYSIN') then do
    x=WriteLog('ATI002E There is no SYSIN DD allocated and no command option.')
    rcode=8
    return rcode
  end
  "EXECIO * DISKR SYSIN (STEM LINES. FINIS"
  if RC>0 then do
     rcode=RC
     x=WriteLog('ATI003E Cannot read the SYSIN DD.')
  end
  if Lines.0 < 1 then do
     x=WriteLog('ATI004E The SYSIN DD is empty.')
     rcode=8
  end

  if rcode\=0 then return rcode
  icmd=0
  continue_line = 0 /* flag of continuous line. */
  do il=1 to Lines.0
    line = strip(Lines.il)
    if line = '' then iterate
    if left(Line,1) == '#' then iterate
    if pos('#', line) > 0 then
       line = strip(substr(line,1,pos('#',line)-1))
    upline = line
    upper upline
    if upLine == 'END' then leave

    if pos('CONFIG(', upline)  == 1 |,
       pos('CONFIG.', upline)  == 1 then do /* configuration */
       call Read_Configuration upline
       iterate
    end
    if \continue_line then do
       icmd=icmd+1
       StartCmds.icmd = line
    end
    else StartCmds.icmd = StartCmds.iCmd||line
    if right(upline,1) == ',' then continue_line = 1
    else continue_line = 0
  end
  StartCmds.0=icmd
  if icmd == 0 then do
    x=WriteLog('ATI005W The SYSIN DD contains no MVS commands.')
    rcode = 4
  end
return rcode

Read_Configuration: Procedure expose JobExcludeList. TimeOut StartOption
  parse arg configline
  if pos('CONFIG(', configline) == 1 then
     parse var configline 'CONFIG(' keyword ')' rest '=' value
  else
     parse var configline 'CONFIG.' keyword '=' value

  keyword = strip(keyword)
  value = strip(value)
  if keyword == '' | value == '' then do
      x=WriteLog('ATI040E The configuration line of',
                 keyword' is invalid and skipped.')
      return
  end
  select
    when keyword == 'OPTION' then do
       if value == 'IPL' | value == 'SHUTDOWN' |,
          value == 'VALIDATE' | value == 'VALIDATE_ONLY' then do
          x=WriteLog('ATI041I Read option value as' value)
          StartOption = value
       end
       else x=WriteLog('ATI042E OPTION value is invalid.')
    end
    when keyword == 'TIMEOUT' then do
       if datatype(value,'N') then do
          x=WriteLog('ATI041I Read timeout value as' value)
          TimeOut = Value
       end
       else x=WriteLog('ATI042E TIMEOUT value is invalid.')
    end
    when keyword == 'EXCLUDE_TASK' then do
       found = 0
       do iJL=1 to JobExcludeList.0
          if JobExcludeList.iJL == value then do
             found = 1
             leave
          end
       end
       if \found then do /* new exclude task. */
          found = JobExcludeList.0
          found = found + 1
          JobExcludeList.found = value
          JobExcludeList.0 = found
          x=WriteLog('ATI043I Read an exclusion task:' value)
       end
       else x=WriteLog('ATI044I Read an existing exclusion task:' value)
    end
    otherwise:
      x=WriteLog('ATI045E The configuration line of',
                 keyword' is invalid and skipped.')
  end
  return
/*===================================================================*/
/*Issue MVS console commands.
   the console response is saved in array CON_MSG.
 */
Process_Inputs:
  ConCode = 0
  drop Item_Cmd. Item_Name. Item_Status. Item_Type.
  if StartOption == 'SHUTDOWN' then do
      ConCode = Test_ShutdownCondition()
      if ConCode\=0 then return ConCode
  end
  ii=0
  Item_Cmd.0=0
  do icmd=1 to StartCmds.0
    ConCmd = StartCmds.icmd
    upper ConCmd
    x=writelog('ATI050I Processing Statement: 'StartCmds.icmd)

    if ConCmd == 'WAIT' | pos('WAIT(',ConCmd)==1 |,
       pos('WAIT ',ConCmd) == 1 then do
       if ii>0 then do
          Item_Cmd.0 = ii
          x=Process_PartialCommands()
       end
       parse var ConCmd 'WAIT' WaitSeconds
       WaitSeconds = strip(WaitSeconds)
       if pos('(', WaitSeconds) then
          parse var WaitSeconds '(' WaitSeconds ')'
       WaitSeconds = strip(WaitSeconds)
       if WaitSeconds == '' |,
          datatype(WaitSeconds, 'N') == 1 then do /* wait in seconds */
          if WaitSeconds \= '' then do
            if pos('VALIDATE',StartOption)==0 then do
               x=WriteLog("ATI060I Wait "WaitSeconds" seconds.")
               x=wait(WaitSeconds)
            end
            else do
               x=WriteLog("ATI061W Wait is skipped for validation.")
            end
          end
       end
       else do /* wait task to stop/start */
         parse var WaitSeconds TaskName ',' WaitOpt
         TaskName       = strip(TaskName)
         WaitOpt        = strip(WaitOpt)     /* STOP START */
         if WaitOpt \= 'STOP' & WaitOpt \= 'START' then do
            x=WriteLog('ATI062E The WAIT option is invalid:' ConCmd)
            x=WriteLog('ATI063W This WAIT Command is skipped.')
         end
         else do
            ii = ii + 1
            Item_Name.ii   = TaskName
            Item_Status.ii = 'RUNNING'
            Item_Type.ii   = WaitOpt
            Item_Cmd.ii    = ''
            Item_Cmd.0     = ii
         end
      end
      if ii > 0 then do
         x=Test_PartialCommands()
         if x>ConCode then ConCode = x
         drop Item_Cmd. Item_Name. Item_Status. Item_Type.
         ii=0
         if ConCode > 0 then return ConCode
      end
      iterate
    end  /* IF */


    ii = ii + 1
    Item_Cmd.ii    =ConCmd    /* MVS command */
    Item_Name.ii   =''        /* Related Address Space name */
    Item_Status.ii ='PENDING' /* PEDING/RUNNING/FINISHED */
    Item_Type.ii   ='OTHER'
    Validate = 1

    select
      when pos('STOP(', ConCmd) == 1 then do /* STOP() command */
         parse var ConCmd 'STOP(' TaskName ',' CmdLists ')'
         TaskName = strip(TaskName)
         CmdLists = strip(CmdLists)
         Validate = 1
         select
           when pos('"', CmdLists) > 0 then
                quote = substr(CmdLists, pos('"', CmdLists), 1)
           when pos("'", CmdLists) > 0 then
                quote = substr(CmdLists, pos("'", CmdLists), 1)
           otherwise quote = '' /* There is no quote */
         end /* select */

         /* Check if any CHECK/NOCHECK keyword. */
         if right(CmdLists,1) \= "'" & right(CmdLists,1) \= '"' &,
            pos(",", CmdLists) > 0 then do
            CmdList2 = reverse(CmdLists)
            parse var CmdList2 Validate ',' CmdLists3
            CmdLists3 = reverse(strip(CmdLists3))
            Validate = reverse(strip(Validate))
            OneCmd = CmdLists3
            select
               when Validate == 'NOCHECK' then Validate = 0
               when Validate == 'CHECK' then Validate = 1
               otherwise OneCmd = CmdLists
            end
            CmdLists = OneCmd
         end
         CmdLists = strip(CmdLists)
         do while CmdLists \= ''
            /* remove any leading , and quote */
            do while left(CmdLists,1) == "," | left(CmdLists,1) == quote
               CmdLists = strip(substr(CmdLists, 2))
            end
            do while right(CmdLists,1) == "," | right(CmdLists,1) == quote
               CmdLists = strip(substr(CmdLists, 1, length(CmdLists)-1))
            end

            select
               when quote == "'" then
                 parse var CmdLists OneCmd "'" CmdLists
               when quote == '"' then
                 parse var CmdLists OneCmd '"' CmdLists
               otherwise do /* no quote */
                 OneCmd   = CmdLists
                 CmdLists = ''
               end
            end /* select */
            CmdLists = strip(CmdLists)
            OneCmd   = strip(OneCmd)
            Item_Name.ii   =TaskName
            Item_Status.ii ='PENDING'
            Item_Type.ii   ='STOP'
            Item_Cmd.ii    = OneCmd
            if CmdLists\='' & Validate == 1 then do
               OneCmd=Validate_Command(Item_Cmd.ii)
               if OneCmd \= '' then do
                  Item_Cmd.ii = OneCmd
                  ii = ii+1
               end
               else do /* remove this command from list */
                  Item_Cmd.ii = ''
                  ii = ii-1
               end
               do while left(CmdLists,1)=="," | left(CmdLists,1)==quote
                  CmdLists = strip(substr(CmdLists, 2))
               end
            end
         end
      end
      when pos('CANCEL(', ConCmd) == 1 then do /* CANCEL() command */
         parse var ConCmd 'CANCEL(' TaskName ')'
         TaskName = strip(TaskName)
         parse value Get_RunningTask(TaskName) with . . taskasid
         if Taskasid == '' then do
            x=WriteLog('ATI064E The task' TaskName 'is not running.')
            x=WriteLog('ATI065W This CANCEL command is skipped.')
            ii = ii - 1
         end
         else do
            Item_Name.ii   =TaskName
            Item_Status.ii ='PENDING'
            Item_Type.ii   ='STOP'
            Item_Cmd.ii    ='CANCEL 'TaskName',A='TaskAsid
            x=WriteLog('ATI066I Cancel command is translated to:')
            x=WriteLog('ATI066I 'Item_Cmd.ii)
         end
      end
      when pos('WAIT(', ConCmd) == 1 then do /* WAIT() command */
         parse var ConCmd 'WAIT(' TaskName ',' WaitOpt ")"
         TaskName       = strip(TaskName)
         WaitOpt        = strip(WaitOpt)     /* STOP START */
         if WaitOpt \= 'STOP' & WaitOpt \= 'START' then do
            x=WriteLog('ATI067E WAIT option is invalid:' ConCmd)
            x=WriteLog('ATI068W This WAIT Command is skipped.')
            ii = ii - 1
         end
         else do
            Item_Name.ii   = TaskName
            Item_Status.ii = 'RUNNING'
            Item_Type.ii   = WaitOpt
            Item_Cmd.ii    = ''
            if ii > 0 then do
               x=Test_PartialCommands()
               if x>ConCode then ConCode = x
               drop Item_Cmd. Item_Name. Item_Status. Item_Type.
               ii=0
               if ConCode > 0 then return ConCode
            end
         end
      end
      when pos('WTO(', ConCmd) == 1 then do /* WTO() command */
         parse var StartCmds.iCmd rest "(" WTOMsg ")"
         WTOMsg = strip(WTOMsg)
         if pos("'", WTOMsg) == 1 | pos('"', WTOMsg) == 1 then do
            WTOMsg = substr(WTOMsg, 2, length(WTOMsg)-2)
         end
         Item_Type.ii   = 'WTO'
         Item_Cmd.ii    = WTOMsg
      end
      when pos('WTOH(', ConCmd) == 1 then do /* WTOH() command */
         parse var StartCmds.iCmd rest "(" WTOMsg ")"
         WTOMsg = strip(WTOMsg)
         if pos("'", WTOMsg) == 1 | pos('"', WTOMsg) == 1 then do
            WTOMsg = substr(WTOMsg, 2, length(WTOMsg)-2)
         end
         Item_Type.ii   = 'WTOH'
         Item_Cmd.ii    = WTOMsg
      end
      when pos('STOP ',   ConCmd) == 1 | pos('P ', ConCmd) == 1 |,
           pos('CANCEL ', ConCmd) == 1 | pos('C ', ConCmd) == 1 |,
           pos('START ',  ConCmd) == 1 | pos('S ', ConCmd) == 1 then do
        parse var ConCmd command ' ' adspname
        adspname = strip(substr(adspname,1,8)) /* The max length is 8 */
        if pos(' ',adspname) > 0 then
           parse var adspname adspname ' ' rest
        if pos(',',adspname) > 0 then
           parse var adspname adspname ',' rest
        Item_Name.ii =adspname
        if command=='START' | command=='S' then Item_Type.ii ='START'
        else Item_Type.ii = 'STOP'
      end
      otherwise NOP  /* All other commands */
    end /*select */

    /* If the command is not WAIT and WTO, validate the command. */
    if Item_Status.ii \= 'RUNNING' & Item_Type.ii \= 'WTO' &,
       Item_Type.ii \= 'WTOH' &,
       Validate == 1 & Item_Cmd.ii \= '' then do
       ConCmd=Validate_Command(Item_Cmd.ii)
       if ConCmd \= '' then Item_Cmd.ii = ConCmd
       else ii = ii-1  /* skip invalid command. */
    end
  end /* do */

  if ii > 0 then do
     Item_Cmd.0 = ii
     x=Process_PartialCommands()
     if x>ConCode then ConCode = x
     x=Test_PartialCommands()
     if x>ConCode then ConCode = x
     if ConCode > 0 then return ConCode
  end
  drop Item_Cmd. Item_Name. Item_Status. Item_Type.
return ConCode

/* Validate the commands.
   if true, return validated command (command may be changed)
   if false, return ""
*/
Validate_Command:
  parse arg ConCmd
  select
   /* plug-in: Test for active address spaces command. */
   when pos('STOP ', ConCmd) == 1 | pos('P ', ConCmd) == 1 |,
     pos('CANCEL ', ConCmd) == 1 | pos('C ', ConCmd) == 1 |,
     pos('MODIFY ', ConCmd) == 1 | pos('F ', ConCmd) == 1 then do
     parse var ConCmd rest ' ' adspname
     adspname = strip(substr(adspname,1,8)) /* The max length is 8 */
     if pos(' ',adspname) > 0 then
        parse var adspname adspname ' ' rest
     if pos(',',adspname) > 0 then
        parse var adspname adspname ',' rest
     adspname = strip(adspname)
     if Get_RunningTask(AdspName) == '' then do
        x=WriteLog("ATI120W Address space "AdspName" is not started.")
        x=WriteLog("ATI121I The command '"ConCmd"' is skipped.")
        ConCmd = ""
     end
   end
   /* plug-in: Test for REPLY command. */
   when pos('REPLY ', ConCmd) == 1 | pos('R ', ConCmd) == 1 then do
     x=WriteLog("ATI122I Checking REPLY command '"ConCmd"'.")
     RepCmd = Get_ReplyCommand(ConCmd)
     if RepCmd = '' then
          x=WriteLog("ATI123W Reply command '"ConCmd"' is skipped.")
     else x=WriteLog("ATI124I Translated REPLY command: '"RepCmd"'.")
     ConCmd=RepCmd
   end
   otherwise NOP
  end

  if length(ConCmd) > 70 then do
     x=WriteLog("ATI125E Following command is longer than 70 characters!")
     x=WriteLog(ConCmd)
     x=WriteLog("ATI126I This command is skipped.")
     ConCmd = ""
  end
return ConCmd

/*
  this is for those command not allowed in TSO CONSOLE command.

 Process commands in Item_Cmd.

 if use IEBGENER, use following allocation:

 ALLOC F(SYSUT2) SYSOUT(A) WRITER(INTRDR)

*/
Process_PartialCommands:
  if Item_Cmd.0 == 0 then return 0
  MVSCommand = 0
  do iPP=1 to Item_Cmd.0
    select
     when Item_Cmd.iPP == '' then do /* WAIT command. */
        Item_Status.iPP='RUNNING'
        iterate
     end
     when Item_Type.iPP == 'WTO' then do /* WTO Messages. */
        x=WriteLog('ATI090I Issuing MVS WTO message:')
        if pos('VALIDATE', StartOption) >0 then do
           x=Writelog(Item_Cmd.iPP)
           x=WriteLog('ATI091I WTO is bypassed for validation only.')
        end
        else x=WTO(Item_Cmd.iPP)
        iterate
     end
     when Item_Type.iPP == 'WTOH' then do /* WTO Messages. */
        x=WriteLog('ATI092I Issuing MVS WTO high light message:')
        if pos('VALIDATE', StartOption) >0 then do
           x=Writelog(Item_Cmd.iPP)
           x=WriteLog('ATI093I WTOH is bypassed for validation only.')
        end
        else x=WTO(Item_Cmd.iPP,'HIGHLIGHT')
        iterate
     end
     otherwise do
       /* All other MVS commands. */
       if pos("'", Item_Cmd.iPP) > 0 then quote='"'
       else quote = "'"
       jes2cmd ="/*$VS,"||quote||Item_Cmd.iPP||quote
       if length(jes2cmd) > 80 then do
           x=WriteLog("ATI094E Following command is too long:")
           x=WriteLog(Item_Cmd.iPP)
           x=WriteLog("ATI095I This command is skipped.")
           iterate
       end
       MVSCommand = 1 /* there is at least one MVS command. */
       if pos('VALIDATE', StartOption)==0 then
          queue left(jes2cmd,80)
       x=WriteLog('ATI096I Issuing command: 'Item_Cmd.iPP)
       if Item_Name.iPP == '' | Item_Name.iPP == 'NONE' then
          Item_Status.iPP='FINISHED'
       else Item_Status.iPP='RUNNING'
     end /* otherwise */
   end /* select */
  end /* do */

  if pos('VALIDATE', StartOption) >0 then do
     x=WriteLog('ATI097I MVS Command is bypassed for validation.')
     return 0
  end

  if MVSCommand == 1 then do
     queue ""
     x=Msg('OFF')
     "SUBMIT *"
     x=Msg('ON')
  end
return RC

/* Test if all commands are finished. */
Test_PartialCommands:
  x=WriteLog("ATI070I Testing pending tasks.");
  if Item_Cmd.0 == 0 then return 0
  if pos('VALIDATE', StartOption) >0 then do
     do iTP=1 to Item_Cmd.0
       select
         when Item_Status.iTP == 'FINISHED' |, /* finished tasks.    */
              Item_Type.iTP == 'WTO' |,        /* WTO Msg            */
              Item_Type.iTP == 'WTOH' |,       /* WTOH Msg           */
              Item_Type.iTP \= 'STOP' |,       /* non-stop commands. */
              Get_RunningTask(Item_Name.iTP) == '' then /*stopped.   */
              NOP
         otherwise                 /* The task is still running. */
              x=WriteLog('ATI071W Waiting' Item_Name.iTP 'to stop.')
       end /* select */
     end /* do iTP */
     x=WriteLog('ATI072I Waiting is bypassed for validation.')
     return 0
  end
  iTimes = 0
  interval = 5  /* wait seconds. */
  WarnTime = 60 /* issue warning message every 60 seconds.*/
  Multiple = 12 /* interval of intervals. */
  do while iTimes * interval  < TimeOut
     Pending = 0
     do iTP=1 to Item_Cmd.0
       select
         when Item_Status.iTP == 'FINISHED' |, /* finished tasks. */
              Item_Type.iTP == 'WTO' |,
              Item_Type.iTP == 'WTOH' then NOP
         when Item_Type.iTP \= 'STOP' then     /* non-stop commands. */
              Item_Status.iTP = 'FINISHED'
         when Get_RunningTask(Item_Name.iTP) == '' then /*stopped.*/
              Item_Status.iTP = 'FINISHED'
         otherwise do              /* The task is still running. */
           Pending = iTP
           /* WTO warning every Multiple intervals. */
           if ITimes>0 & (iTimes//Multiple)==0 then do
              if StartOption=='SHUTDOWN' then
                   x=WTO('SHUTDOWN is waiting' Item_Name.iTP 'to stop.')
              else x=WriteLog('ATI073W Waiting' Item_Name.iTP 'to stop.')
           end
         end /* otherwise */
       end /* select */
     end /* do iTP */
     if Pending==0 then leave
     x=wait(interval) /* test every interval seconds. */
     iTimes=iTimes + 1
  end /* do while */
  if Pending>0 then do
    x=WriteLog("ATI074E Command is not meet the requirement in",
               TimeOut" seconds")
    x=WriteLog(Item_Cmd.Pending)
    return 8
  end
  x=WriteLog("ATI075I All pending tasks are finished.");
return 0

/* Test if the system is ready to shutdown. */
Test_ShutdownCondition:
  TSCode = 0
  TSCount = 0
  Drop WTOMsg.
  do while TSCount < TimeOut
     iWTO =0
     if TSCount == 0 then do
        iWTO=iWTO+1
        WTOMsg.iWTO='System Shutdown Task Begins.'
     end
     else x=wait(60)
     TSCount = TSCount + 60
     x=Get_RunningTasks()
     if Task_Name.0 == 0 then do    /* No running task then leave */
        WTOMsg.0=iWTO; x=WTO()
        leave
     end
     iWTO=iWTO+1
     WTOMsg.iWTO='System Shutdown Task Detects These Running Tasks:'
     iWTO=iWTO+1
     WTOMsg.iWTO='TYPE NAME     DESCRIPTION '
     iWTO=iWTO+1
     WTOMsg.iWTO='____ ________ ____________________________________'
     do iTS=1 to Task_Name.0
        if Task_Type.iTS == 'TSO' then
             Description = 'TSO Userid, type C U='Task_Name.iTS' to stop.'
        else
             Description = 'Batch job,  type C 'Task_Name.iTS' to stop.'
        iWTO=iWTO+1
        WTOMsg.iWTO=LEFT(Task_Type.iTS,4)||' '||,
                    LEFT(Task_Name.iTS,8)||' '||Description
     end
     if TSCount < Timeout then do
        iWTO=iWTO+1
        WTOMsg.iWTO='Please stop them now, or shutdown will not run!'
        iWTO=iWTO+1
        WTOMsg.iWTO='Wait 1 minute for next detection(max',
                TimeOut 'seconds)...'
        WTOMsg.0=iWTO; x=WTO()
     end
     else do /* it's timeout */
        iWTO=iWTO+1
        WTOMsg.iWTO=,
        'System Shutdown Task cannot go without above tasks stopped.'
        WTOMsg.0=iWTO; x=WTO()
        TSCode = 8
        leave
     end
  end /* do while */
  if TSCode == 0 then x=WTO('System Shutdown continues...')
return TSCode
/* Get All running TSO User and JOBs.
   in Task_Name. and Task_Type.
*/
Get_RunningTasks:
  cvt=ptr(16)                         /* Get CVT                    */
  asvt=ptr(cvt+556)+512               /* Get asvt                   */
  asvtmaxu=ptr(asvt+4)                /* Get max asvt entries       */
  asinfo = ''
  Drop Task_Name. Task_Type. iAS
  iAS = 0
  Do a = 0 to asvtmaxu - 1
    ascb=stg(asvt+16+a*4,4)       /* Get ptr ascb (Skip master) */
    If bitand(ascb,'80000000'x)=='00000000'x Then /*If in use    */
    Do
      ascb=c2d(ascb)                   /* Get ascb address           */
      cscb=ptr(ascb+56)                /* Get CSCB address           */
      asid=c2x(stg(ascb+36,2))   /* Get ASID address           */
      chtrkid=stg(cscb+28,1)           /* Check addr space type      */
      ascbjbns=ptr(ascb+176)           /* Get ascbjbns               */
      ascbjbni=ptr(ascb+172)           /* Get ascbjbni               */
      asinfo = ''
      If chtrkid='01'x Then            /* If tso user                */
         If stg(ascbjbns,1)>='4a'x & stg(ascbjbns,1)<='Z' Then
            asinfo = 'TSO '||strip(stg(ascbjbns,8))||' 'asid
      If chtrkid='02'x Then            /* If stc user                */
            asinfo = 'STC '||strip(stg(ascbjbns,8))||' 'asid
      If chtrkid='03'x & ascbjbni<>0 Then /* If job asid             */
            asinfo = 'JOB '||strip(stg(ascbjbni,8))||' 'asid
      If chtrkid='04'x Then            /* If tso user                */
            asinfo = 'SYS '||strip(stg(ascbjbns,8))||' 'asid
      if pos('TSO ', asinfo) == 1 | pos('JOB ', asinfo) == 1 then do
         parse var asinfo astype asname asid
         exfound = 0
         do iex=1 to JobExcludeList.0
            if pos(JobExcludeList.iex, asname) == 1 then do
               exfound = 1
               leave
            end
         end
         if exfound then iterate
         iAS = iAS + 1
         Task_Name.iAS = asname
         Task_Type.iAS = astype
      end
    End /* if bitand */
  End /* DO a */
  Task_Name.0 = iAS
  Task_Type.0 = iAS
Return 0

/* Write to console:
   the message in either array WTOMsg. or string WTOMsg
 */
WTO:
   parse arg WTOMsg,WTOType
   WTOCode = 0
   if WTOMsg\='' then do
      WTOMsg  = strip(WTOMsg,'T')
      drop WTOMsg.; WTOMsg.0=1; WTOMsg.1 = WTOMsg
   end
   else if \datatype(WTOMsg.0,'N') then return 8
   x=Msg('OFF')
   "FREE F(SYSIN)"
   "ALLOC F(SYSIN) SPACE(1) TRACK DSORG(PS) BLKSIZE(8000) LRECL(80) NEW DELETE"
   if RC \= 0 then do
      x=WriteLog("ATI130E Cannot allocate SYSIN for WTO messages.")
      return 8
   end
   "EXECIO * DISKW SYSIN (STEM WTOMsg. FINIS"
   if RC \= 0 then do
      "FREE F(SYSIN)"
      x=WriteLog("ATI131E Cannot allocate SYSIN for WTO messages.")
      return 8
   end
   if WTOType=='HIGHLIGHT' then /* issue highlight WTO message */
      "CALL *(WTOH)"
   else /* issue normal WTO message */
      "CALL *(WTO)"
   WTOCode = RC
   "FREE F(SYSIN)"
   x=MSG('ON')
   do i=1 to WTOMsg.0; x=WriteLog(WTOMsg.i); end
   drop WTOMsg.
return WTOCode

return TSCode

/* Function: Find a running task given the task name, and
   the asid. List the address space name which asid is not given
   asid.

   If found, return 'type name asid'
      type: STC, JOB, TSO or SYS
      name: The name of address space
      asid: The address space id which is active and not the same
            as the given one.
   ascb_name: The given address space name. Mandatory
   ascb_asid: The address space id to be excluded. Optional
*/
Get_RunningTask:
  parse arg ascb_name,ascb_asid
  if ascb_name=='' then return ''      /* The ascb_name is a must.   */
  cvt=ptr(16)                         /* Get CVT                    */
  asvt=ptr(cvt+556)+512               /* Get asvt                   */
  asvtmaxu=ptr(asvt+4)                /* Get max asvt entries       */
  asinfo = ''
  Do a = 0 to asvtmaxu - 1
    ascb=stg(asvt+16+a*4,4)       /* Get ptr ascb (Skip master) */
    If bitand(ascb,'80000000'x)=='00000000'x Then /*If in use    */
    Do
      ascb=c2d(ascb)                   /* Get ascb address           */
      cscb=ptr(ascb+56)                /* Get CSCB address           */
      asid=c2x(stg(ascb+36,2))   /* Get ASID address           */
      chtrkid=stg(cscb+28,1)           /* Check addr space type      */
      ascbjbns=ptr(ascb+176)           /* Get ascbjbns               */
      ascbjbni=ptr(ascb+172)           /* Get ascbjbni               */
      If chtrkid='01'x Then            /* If tso user                */
         If stg(ascbjbns,1)>='4a'x & stg(ascbjbns,1)<='Z' Then
            asinfo = 'TSO '||strip(stg(ascbjbns,8))||' 'asid
      If chtrkid='02'x Then            /* If stc user                */
            asinfo = 'STC '||strip(stg(ascbjbns,8))||' 'asid
      If chtrkid='03'x & ascbjbni<>0 Then /* If job asid             */
            asinfo = 'JOB '||strip(stg(ascbjbni,8))||' 'asid
      If chtrkid='04'x Then            /* If tso user                */
            asinfo = 'SYS '||strip(stg(ascbjbns,8))||' 'asid
      if asinfo\='' then do
         parse var asinfo astype asname asid
         if ascb_name == asname then do
            if ascb_asid == '' then leave
            else if ascb_asid\=asid then leave
         end
      end
      asinfo = ''
    End
  End
Return asinfo

/*
  ReplyKeyCommand:
    'R|REPLY keyword,option'
  This function will replace the keyword with the number in
  reply pending list.

  if found the pending reply, return the actual MVS reply command
  otherwise show the error message and return ''
*/
Get_ReplyCommand:
  parse arg RepKeyCommand
  drop repkeywords rest firstkey repoption,
       repfound irep repnumber
  parse var RepKeyCommand RepCommand ' ' repkeywords /* remove R|REPLY */
  if pos(',', repkeywords) == 0 then do
     x=WriteLog("ATI080E The REPLY command '"RepKeyCommand"' is invalid.")
     return ""
  end
  parse var repkeywords firstkey ',' repoption
  /* If the keyword is a number, then return the original one. */
  if datatype(firstkey,'N') then return RepKeyCommand
  select
     when pos("'", repkeywords)==1 then do /* there is a ' in keyword.*/
       parse var repkeywords "'" repkeywords    /* remove ' */
       if pos("',", repkeywords)==0 then do
          x=WriteLog("ATI081E The REPLY command '"RepKeyCommand"' is invalid.")
          return ""
       end
       parse var repkeywords repkeywords "'," repoption
    end
    when pos('"', repkeywords)==1 then do /* there is a " in keyword.*/
       parse var repkeywords '"' repkeywords    /* remove " */
       if pos('",', repkeywords)==0 then do
          x=WriteLog("ATI082E The REPLY command '"RepKeyCommand"' is invalid.")
          return ""
       end
       parse var repkeywords repkeywords '",' repoption
    end
    otherwise parse var repkeywords repkeywords ',' repoption
  end /* select */

  if repkeywords == '' | repoption == '' then do
     x=WriteLog("ATI083E The REPLY command '"RepKeyCommand"' is invalid 4.")
     return ""
  end
  x=Console_Command('D R,L,CN=(ALL)')
  if ConMsg.0 == 0 then do
     x=WriteLog("ATI084W There is no pending REPLY as keyword" repkeywords)
     return ""
  end
  repfound = 0
  repbegin = 0
  do irep=1 to ConMsg.0
     ConMsg.irep = strip(ConMsg.irep)
     if pos('MESSAGE TEXT', ConMsg.irep) > 0 then do
        repbegin = 1
        iterate
     end
     if repbegin then do
        upline = ConMsg.irep
        upper upline
        if pos(repkeywords, upline) > 0 then do
           parse var ConMsg.irep repnumber ' ' rest
           repfound = 1
           leave
        end
     end
  end
  if \repfound then do
     x=WriteLog("ATI085W There is no pending REPLY as keyword" repkeywords)
     return ""
  end
  RepCommand=strip(RepCommand) repnumber','strip(repoption)
  return RepCommand

/* Issue a MVS console command.
   the console response is saved in arrag CCSCMSG.
 */
Console_Command:
  parse arg con_cmd
  if con_cmd == '' then return 0
  DROP CONMSG.
  CCSC_CART = 'SC'||rand(6)
  "CONSPROF SOLDISP(NO)"
  "CONSOLE ACTIVATE NAME("CCSC_CART")"
  "CONSOLE SYSCMD("con_cmd") CART('"CCSC_CART"')"
  x=GETMSG('CONMSG.','SOL',CCSC_CART,,10)
  "CONSOLE DEACTIVATE"
  "CONSPROF SOLDISP(YES)"
return 0

/*===================================================================*/
/* Check if the given DD is defined.
   return 1 if defined.
   otherwise 0
*/
CheckDDName:
  parse arg GivenDDName
  if GivenDDName=='' then return 0
  upper GivenDDName
  Drop DDResults. iDD
  x = OUTTRAP('DDResults.')
  "LISTALC STATUS"
  x = OUTTRAP('OFF')
  Found = 0
  do iDD=1 to DDResults.0
     if POS(GivenDDName' ',Strip(DDResults.iDD))==1 then do
        Found = 1; leave
     end
  end
  Drop DDResults. GivenDDName iDD
return Found

/*===================================================================*/
/* Provide common program end interface.
 */
Program_Ends:
  parse arg ExitCode
  if ExitCode == '' then ExitCode = 0
  if ExitCode == 0 then status='normally'
  else status='abnormally'
  if StartOption == 'SHUTDOWN' then do
     iWTO=1
     WTOMsg.iWTO='System Shutdown Task stopped 'status'. RC='ExitCode
        WTOMsg.0=iWTO; x=WTO()
  end
  else do
        x=WriteLog('ATI020I 'Title' is stopped' status)
        x=WriteLog('ATI021I Maximum Return Code is' ExitCode)
  end
  exit(ExitCode)

/*===================================================================*/
Debug:
WriteLog:
   parse arg Msg
   LastChar=Right(Msg,1)
   if Datatype(LastChar,'A') == 1 | LastChar == ')' then Msg=Msg'.'
   say date('S')','time()','Msg
   return 0

/*===================================================================*/
/* The wait in count in seconds. */
/* Say wait 1 hour, call Wait(3600) */
Wait:
Sleep:
  parse arg seconds
  ADDRESS TSO "CALL *(WAIT) '"seconds"'"
return 0;

/*===================================================================*/
/* return a radmon number ranged from the server port */
rand:
  parse arg length
  if length == '' then length = 6
  if \datatype(length,'NUM') then length = 6
  min=left(1,length,'0')
  return RANDOM(min,min+99999)

/*===================================================================*/
/* return the pointer at given address. */
ptr: return c2d(storage(d2x(arg(1)),4))
/*===================================================================*/
/* return the contents at given address. */
stg: return storage(d2x(arg(1)),arg(2))

