WAIT     TITLE 'SUSPEND EXECUTION FOR GIVEN TIME'
***********************************************************************
* PROGRAM: WAIT                                                       *
* AUTHOR : Hunter Guanghui Zhou                                       *
*          Phone: 1-(416)-602-9567                                    *
*          E-mail: zhough2000@yahoo.com                               *
* UPDATE : April 2003                                                 *
* PURPOSE: Suspend execution for given time in EXEC PARM              *
*          The PARM inputs support 3 formats:                         *
* COMPILE:                                                            *
*  This program is a re-entreent program, you can put this program    *
*  in your system LPA (LPALSTxx) or LINKLST (PROGxx).                 *
*  The linkedit should use RENT keyword to make it re-retreent.       *
*  Sample Compile JCL:                                                *
*  // SET  SRCLIB='SP2487.ASM.SOURCE',   <==PDS where source located  *
*  //      LOADLIB='SYS1.TEST.LINKLIB'                                *
*  //CPLCMDS  EXEC ASMACL,PARM.L='LIST,RENT'                          *
*  //C.SYSIN   DD DISP=SHR,DSN=&SRCLIB(ASMWAIT)                       *
*  //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB                            *
*  //          DD DISP=SHR,DSN=SYS1.MODGEN                            *
*  //L.SYSLMOD DD DISP=SHR,DSN=&LOADLIB                               *
*  //L.SYSIN   DD *                                                   *
*    NAME WAIT(R)                                                     *
*  /*                                                                 *
*                                                                     *
* USAGE                                                               *
* =====                                                               *
*  1. Complete form: HHMMSSth, wait minimum 0.01 seconds              *
*     HH: Hour                                                        *
*     MM: Minute                                                      *
*     SS: Seconds                                                     *
*     th: 0.01 seconds                                                *
*  Syntax:                                                            *
*  //WAIT EXEC PGM=WAIT,PARM='HHMMSSth'                               *
*  Example:                                                           *
*  //WAIT EXEC PGM=WAIT,PARM='00050000'       wait 5 minutes          *
*                                                                     *
*  2. Supressed form: HHMMSS, wait minimum 1 second                   *
*     HH: Hour                                                        *
*     MM: Minute                                                      *
*     SS: Seconds                                                     *
*  Syntax:                                                            *
*  //WAIT EXEC PGM=WAIT,PARM='HHMMSS'                                 *
*  Example:                                                           *
*  //WAIT EXEC PGM=WAIT,PARM='000030'         wait 30 seconds         *
*                                                                     *
*  3. Second form: SSSSS, wait minimum 1 second                       *
*     SSSSS: variable number range from 1 to 99999 seconds            *
*  Syntax:                                                            *
*  //WAIT EXEC PGM=WAIT,PARM='sssss'                                  *
*  Example:                                                           *
*  //WAIT EXEC PGM=WAIT,PARM='3600'     wait 3600 seconds (1 hour)    *
*                                                                     *
*                                                                     *
* Program Call:                                                       *
*         R1 -> PARMADDR -> H'8',C'HHMMSSHH'  HOUR-MIN-SEC-S/100      *
*     OR  R1 -> PARMADDR -> H'6',C'HHMMSS'    HOUR-MIN-SEC            *
*     OR  R1 -> PARMADDR -> H'N',C'SSSSS'     UP TO 99999 SECONDS     *
*     R15 RETURN CODE:  0 - SUCCESSFUL   8 - INVALID PARAMETER        *
*                                                                     *
* RETURN CODES                                                        *
* ============                                                        *
*   0     SUCCESSFUL                                                  *
*   4     NO PARM GIVEN, RETURN IMMEDIATELY                           *
*   8     ONE OF FOLLOWING SYNTAX ERROR:                              *
*         A. THE LENGTH IS INVALID, GREATE THAN 6 BUT NOT 8           *
*         B. THE HOUR/MINUTE/SECOND ARE IN INVALID RANGE, VALID RANGE:*
*            HOUR  : 00 - 24                                          *
*            MINUTE: 00 - 59                                          *
*            SECOND: 00 - 59                                          *
*         C. THE PARM CONTAIN NON-DIGIT CHARACTER                     *
*  16     GETMAIN ERROR, CANNOT ALLOCATE STORAGE FOR BUFFERS          *
*                                                                     *
***********************************************************************
         PRINT NOGEN
WAIT     CSECT
WAIT     AMODE 31
WAIT     RMODE ANY
*---------------------------------------------------------------------*
* DEFINE REGISTER EQUALS USING IBM STANDARD MACRO YREGS               *
*---------------------------------------------------------------------*
         YREGS
*---------------------------------------------------------------------*
* BUILD LINKAGE CONVENTION:                                           *
* STEP 1: SAVE THE CURRENT REGISTERS TO CALLERS SAVE AREA             *
* STEP 2: BUILD OUR OWN ADDRESSABILITY                                *
* STEP 3: SAVE THE CALLERS ADDRESS (R13) INTO OUR SAVE AREA + 4       *
* STEP 4: SAVE THE OUR STARTING ADDRESS INTO R13                      *
*         THIS IS TO BUILD THE LINKAGE CHAIN                          *
*---------------------------------------------------------------------*
* ESTABLISH ADDRESSABILITY, USING R15 AS TEMPORARY BASE REGISTER
         USING WAIT,R15           R15 IS CURRENT ADDRESS, USING IT
         B     WAITSTRT           BRANCH AROUND CONSTANTS
         DC    C'PROGRAM NAME(WAIT) '          MODULE IDENTIFIER
         DC    C'COMPILE TIME(&SYSDATE &SYSTIME)'
         DC    C'WAIT: WAIT with following EXEC PARM sytax: '
         DC    C'COMPLETE(HHMMSSth),SUPRESS(HHMMSS) or SECONDS(SSSSS) '
         DC    C'Design: Hunter Zhou, zhough2000@yahoo.com     '
WAITSTRT DS    0H
         SAVE  (14,12)            ; SAVE CALLER'S REGISTERS USING SAVE
         LR    R12,R15            ; COPY THE CURRENT CSECT LOCATION
         DROP  R15                ; DROP THE TEMPORARY USING
         USING WAIT,R12           ;
         MODID BRANCH=YES         ;
* SAVE THE PARM ADDRESS INTO R4
         LR    R4,R1              ; COPY THE PARM ADDR FROM R1 TO R4
*---------------------------------------------------------------------*
* DYNAMICALLY ALLOCATE STORAGE FOR DATA AREAS
*---------------------------------------------------------------------*
         GETMAIN RC,LV=DSALEN,LOC=BELOW ;ALLOCATE STORAGE DSALEN BYTES
         LTR   R15,R15            ;TEST THE RETURN CODE
         BNZ   MAINERR            ;IF FAILED, RETURN TO MAINERR
         LR    R11,R1             ;ADDR OF ENTRY POINT
         USING DSA,R11            ;USING R11 AS STOR ADDRESSING REGS.
         ST    R13,SAVEAREA+4     ;SET OUR BACKWARD LINK
         LA    R15,SAVEAREA       ;ADDR OF OUR SAVEAREA
         ST    R15,8(R13)         ;SET CALLER'S FORWARD LINK
         LR    R13,R15            ;ADDR OF OUR SAVEAREA
*---------------------------------------------------------------------*
* INITIALIZATION
*---------------------------------------------------------------------*
         XC    RETCODE,RETCODE    ; RESET RETURN CODE 0
         XC    PKNUM1,PKNUM1      ; RESET PACKED NUMBER WITH 0
         XC    PKNUM2,PKNUM2      ; RESET PACKED NUMBER WITH 0
         MVC   DECNUM(8),CDECNUM  ; COPY 0S
         MVC   TIMEBUF(8),HHMMSSHH ; COPY THE DEFAULT TIME
*---------------------------------------------------------------------*
* SAVE THE PARAMETER TO PRIVATE STORAGE (PARM AND PARMLEN)
*---------------------------------------------------------------------*
         L     R4,0(,R4)          ;START  OF PARM
         LH    R9,0(,R4)          ;LENGTH OF PARM
         LTR   R9,R9              ;R9 IS ZERO?
         BZ    NOPARM             ;NO PARM GIVEN
         LA    R10,2(,R4)         ;START OF PARM DATA
         STH   R9,PARMLEN         ;COPY THE PARAMETER LENGTH TO PARMLEN
         BCTR  R9,0               ;DECREMENT LENGTH BY 1
         EX    R9,MVCPARM         ;COPY PARMATER TO PARM STORAGE
*---------------------------------------------------------------------*
* TEST THE PARM FORMAT
* 1. THE LENGTH IS 8        : HHMMSSHH
* 2. THE LENGTH IS 6        : HHMMSS
* 5. THE LENGTH LESS THAN 6 : SSSSS     IN SECONDS
*---------------------------------------------------------------------*
* VERIFY IF ALL BYTES ARE DIGITS.
         LH    R9,PARMLEN
         LA    R3,PARM
VERLOOP  CLI   0(R3),C'0'                                   ALL-DIGITS?
         BL    WAITERR                                         NO, QUIT
         LA    R3,1(0,R3)
         BCT   R9,VERLOOP
*---------------------------------------------------------------------*
         LH    R9,PARMLEN
         LA    R8,X'8'            ; LOAD THE LENGTH
         CR    R9,R8
         BE    WAITDINV           ; CONTINUE WITH DECIMAL INVERTAL
         LA    R8,X'6'            ; LOAD THE LENGTH
         CR    R9,R8
         BE    WAITDINV           ; CONTINUE WITH DECIMAL INVERTAL
         LA    R8,X'6'            ; LOAD THE LENGTH
         CR    R9,R8
         BL    WAITBINV           ; CONTINUE WITH BINARY INVERTAL
* FOR PARM LENGTH GREAT THAN 6 BUT 8, RETURN WITH ERROR
         B     WAITERR
* PROCESS WAIT IN HHMMSSTH FORMAT
WAITDINV EQU   *
         LA    R6,TIMEBUF
         LA    R7,PARM
         LR    R5,R9
         BCTR  R5,0
         EX    R5,MVCREC          ; COPY THE TIME PARM
VERCLOCK CLC   HHMMSSHH(2),=C'24'                            HOURS<=24?
         BH    WAITERR                                         NO, QUIT
         CLC   HHMMSSHH+2(2),=C'59'                        MINUTES<=59?
         BH    WAITERR                                         NO, QUIT
         CLC   HHMMSSHH+4(2),=C'59'                        SECONDS<=59?
         BH    WAITERR                                         NO, QUIT
         LA    R6,TIMEBUF
         STIMER WAIT,DINTVL=(R6)         WAIT FOR TIME SPECIFIED
         B     WAITEND
* PROCESS WAIT IN SECONDS FORMAT
WAITBINV EQU   *
         LA    R6,DECNUM                 LOAD THE DECIMAL FORM BUFFER
         LA    R6,1(0,R6)                SKIP FIRST BYTE
         LA    R7,PARM                   LOAD SOURCE
         LH    R5,PARMLEN                LOAD SOURCE LENGTH
         LA    R4,5                      LOAD THE MAXIMUM LENGTH
         SR    R4,R5                     GET THE ACTUAL COPY POSITION
         AR    R6,R4                     MOVE R6 TO COPY POSITION
         BCTR  R5,0                      DECREASE R5 BY 1
         EX    R5,MVCREC                 COPY FROM PARM TO DECNUM
         PACK  PKNUM2(4),DECNUM(8)       PACK THE 8 DIGIT DECIMALS
         CVB   R5,PKNUM                  CONVERT DECIMAL TO BINARY R5
         ST    R5,SCNDBUF                SAVE THE WAIT TIME TO SCNDBUF
         LA    R6,SCNDBUF                SAVE THE WAIT TIME TO SCNDBUF
         STIMER WAIT,BINTVL=(R6)         WAIT FOR TIME SPECIFIED
         B     WAITEND
* PROCESS AND SET RETURN CODES
NOPARM   EQU   *
         MVI   RETCODE,X'4'
         B     WAITEND
WAITERR  EQU   *
         MVI   RETCODE,X'8'
         B     WAITEND
WAITEND  EQU   *
         B     RETURN
MAINERR  EQU   *
         LA    R15,X'10'
         B     MAINEXIT
*---------------------------------------------------------------------*
*  RETURN LINKAGE TO THE CALLER                                       *
*---------------------------------------------------------------------*
RETURN   EQU   *
         XR    R9,R9
         ICM   R9,B'0001',RETCODE   ;LOAD THE RETURN CODE TO R9
         FREEMAIN RU,LV=DSALEN,A=(R11)  ; THE ALLOCATED STORAGE
         LR    R15,R9               ;SAVE THE RETURN CODE TO R15
MAINEXIT L     R13,4(R13)           ;ADDR OF CALLER'S SAVEAREA
         RETURN (14,12),RC=(15)     ;RESTORE CALLER'S REGS AND RETURN
*======================================================================
         SPACE 3
***********************************************************************
* PROGRAM CONSTANTS --------------------------------------------------*
***********************************************************************
*======================================================================
MVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5
MVCPARM  MVC   PARM(0),0(R10)     ;COPY THE PARAMETER TO STORAGE PARM
HHMMSSHH DC    CL8'00000000'
CDECNUM  DC    CL8'00000000'      ; DECIMAL BUFFER
***********************************************************************
* DATA STORAGE IN DYNAMIC MODE                                        *
* THESE DATA STORAGES WILL BE UPDATED DURING EXECUTION.
***********************************************************************
         DS    0F
DSA      DSECT
SAVEAREA DS    18F                ;REGISTER SAVE AREA
RETCODE  DS    XL1                ;RETURN CODE
*
         DS    0F
PARMLEN  DS    H                  ;THE LENGTH OF THE PARM
PARM     DS    CL126              ;PARAMETER FROM
*
         DS    0D
TIMEBUF  DS    CL8                ; DINTVL FORMAT
SCNDBUF  DS    F                  ; BINTVL FORMAT
*
PKNUM    DS    0XL8               ; 8 BYTES AREA
PKNUM1   DS    XL4                ; ALIGNMENT ONLY SHOULD BE X'00'S
PKNUM2   DS    XL4                ; PACKED NUMBER FROM DECNUM
DECNUM   DS    CL8                ; DECIMAL BUF 00+5 IN parm + 00
DSALEN   EQU   *-DSA
*---------------------------------------------------------------------*
*  END OF PROGRAM                                                     *
*---------------------------------------------------------------------*
.END     END   WAIT
