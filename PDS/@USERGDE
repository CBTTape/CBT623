AUTOIPL USER GUIDE
==================

Introduction
------------
  AUTOIPL is a package to automate your shutdown and IPL procedure.
This package is a free license and open source package.

The package has following feature:
  1. Automatic shutdown the system in proper sequence.
     After a single command (S SHUTDOWN), the system will be completely
     shutdown and ready to power off or re-IPL.

  2. Safe to shutdown.
     As AUTOIPL will not shutdown until all running tasks are stopped,
     It's safe by issuing the command by mistake.

  3. Proper Messages.
     The package will show the proper messages to indicate the
     status of the procedure.

  4. Automatic IPL
     After system IPLed, the start tasks will be started in proper
     sequence. There is no user intervention required.

Comments
--------
 Any words beyond '#' will be comments and ignored.
 You can put a '#' at the beginning of the line to comment it out.
 Or. you can put comments at the end of statements.

 Examples:

 # First Phase: stop most applications.
 # ...
 # Wait 1 minute.
 WAIT 60
 ...
 P TCPIP      # Stop TCP/IP and TCP/IP dependent tasks.

 Any space before or after each command will be ignored.
 Any empty line will be ignored.

MVS Commands
------------
 Each MVS command must be within 70 charaters.
 The AUTOIPL will check the command length and ignore the command
 exceeds 70 characters.

Statements
----------
 You can put commands in multiple line, for example:
         STOP(NPFFWTR ,'$PPRT6',
                       '$PPRT7',
                       '$PPRT8')
 You must put comma(,) to tell the command continues next line.
 This example is the same as:
         STOP(NPFFWTR ,'$PPRT6','$PPRT7','$PPRT8')

Special Commands
----------------
 Normally, the statements are treated as MVS system command and
 AUTOIPL will issue it for to system.

 There are some special statements.

 a. WAIT

    If you need to wait, code following line:
       WAIT
    or WAIT seconds

    Specify wait time in seconds, i.e. 'WAIT 300' for 5 minutes.

    There is a special function for WAIT statement. The WAIT statement
    will also check the completion of previous commands.
    For shutdown, the WAIT will tell AUTOIPL to wait for the termination
    of all tasks issued by STOP commands.

    You should use WAIT command when you need to stop tasks in sequence.

    i.e. Stop RMF TCP/IP Server before stop RMF:

    P GPMSERVE     # issue STOP RMF TCP/IP Server command
    WAIT 30        # WAIT at leat 30 seconds and checking GMPSERVE.
    P RMF          # stop RMF and RMF III

 b. END

    If you need to specify end of the parameter member explicitely,
    use following statement:
       END
    Any line beyond this line will be ignored.


 c. REPLY or R

    If you need to stop address space by REPLY command,
    you can specify them by keyword instead of reply number.
        R keyword,command
    For example:
        R EZY0960I,STOP
    The program will look up the keyword 'EZY0960I' and it's reply
    number in reply list, and replace the keyword with the number nn,
    and issue the MVS command:
        R nn,STOP

    If the keyword is a number, the program will not
    translate it, it will issue it as a REPLY command.

    If the keyword is a string with space or comma,
    use quote around the keyword, i.e.:
        R 'JES328Z - ENTER COMMAND',END

 c. STOP

    If you need to issue some special command to shutdown some tasks,
    use following format:

        STOP(addrname,'command1','command2',CHECK/NOCHECK)

    addrname is the address space name to stop,
    if this is a hook, just code the start task name.
    The default option is CHECK, which will check if the given
    task is running for STOP/MODIFY/CANCEL commands. If the
    task is not running and option is CHECK or omitted,
    these commands will not be issued.
    For some special tasks (FFST), you need code NOCHECK to
    provent checking FFST's running status before issuing the
    STOP command because the task name for FFST is EPWFFST.
    for example:
          i.  STOP(NPFFWTR,'$PPRT6','$PPRT7','$PPRT8')

         ii.  STOP(DMSAR   ,'S DMSAR,DMSAR=REMOVE')
            DMSAR is a hook, the program will wait until this
            DMSAR started task stops.

        iii.  STOP(none    ,'P FFST',NOCHECK)
              WAIT 10
              STOP(EPWFFST ,'R EPW0309I,YES')

            Issue STOP FFST, then FFST will issue a reply message,
            Wait 10 seconds, and reply the message as 'YES'.

 e. If you need to wait some task to stop/start without issuing
    any command (command may be issued before), use following
    comamnd:
              WAIT(taskname, STOP/START)
    The program will detect and wait till the taskname is started or
    stopped.
    This feature is useful for those tasks needs a long time to stop.

    Example:
        STOP(NONE, 'P SLS0')
         ...
        WAIT(60)
         ...
        WAIT(SLS0, STOP)
         ...
        WAIT(10)
          This technique will use 2 or more stages to allow the task
          to stop.
 f WTO and WTOH
   If you need to write console message, use command:
        WTO('message')
    or
        WTO(message)
   You can use WTOH to issue high light messages


Configuration Statements
------------------------

   There are some settings control how the program runs.

        CONFIG(keyword)= value

   keyword are:
     a.OPTION   The options are :
                IPL           : Tell this is a IPL procedure
                SHUTDOWN      : Tell this is a SHUTDOWN procedure
                VALIDATE_ONLY : Validate the commands only.
                                No MVS command will be issued.
                                This is for test purpose.
                The default value is none.

     b.TIMEOUT  The timeout value in seconds.
                The timeout will be used for waiting for task to stop
                The default timeout is 300

     c.EXCLUDE_TASK  This is the address space name which will be
                excluded when the program checking running task.
                You can specify multiple EXCLUDE_TASK.
                The default tasks are FTPD, INETD and SYSLOGD
                These tasks normally are TSO or BATCH jobs.

   For shutdown, the AUTOIPL will check if there is any running
   jobs. If any, it will issue a console message to show the running
   task, and check it every 1 minute. All commands will not be issued
   until these running tasks stops.

   For some environment, there are some running batch jobs or TSO
   users as part of system running task, not user batch jobs.
   The example are TCP/IP FTPD, INETD and SYSLOGD.
   In order to bypass checking these tasks, you need to use
   CONFIG(EXCLUDE_TASK) to bypass them at shutdown parameter member.

   The CONFIG statement can be anywhere in the parameter member.

Examples
--------
  1. IPL examples.
     IPLCMDS : Started Task for IPL
     IPLPROD : AUTOIPL Option file for IPLCMDS in production system
     IPLTEST : AUTOIPL Option file for IPLCMDS in test system

  2. Shutdown examples.
     SHUTDOWN: Started Task for shutdown
     SHUTPROD: AUTOIPL Option file for SHUTDOWN in production system
     SHUTTEST: AUTOIPL Option file for SHUTDOWN in test system

  3. Restart examples.
     IPLTCPIP: AUTOIPL Option file to automatic OMVS parameter updates:
               step 1: Stop all TCP/IP applications
               step 2: Update OMVS parameters via SETOMVS command
               step 3: Start all TCP/IP applications

General Utilities
-----------------
  There are three general utilities shipped with this package:
  CONSCMD : Issue console command via EXEC PARM
  WAIT    : Wait or sleep in specific time given in EXEC PARM
  WTO/WTOH: Send WTO messages (normal or highlighted) to console
    All these utilities are re-retrent program, you can load them
  into LPA or LINKLST. CONSCMD must be APF authorized. See installation
  guide for details.

  1. CONSCMD
   Issue console command via EXEC PARM
   The command in parm is a single command form
     FOR EXAMPLE,
     //JOBCARD
     //OFFLINE EXEC PGM=CONSCMD,PARM='V 107A,OFFLINE'
     //STEPn...
     //ONLINE  EXEC PGM=CONSCMD,PARM='V 107A,ONLINE'

  2. WAIT
   Wait or sleep in specific time given in EXEC PARM
   It support three forms in PARM:
  a. Complete form: HHMMSSth, wait minimum 0.01 seconds
     HH: Hour
     MM: Minute
     SS: Seconds
     th: 0.01 seconds
  Syntax:
  //WAIT EXEC PGM=WAIT,PARM='HHMMSSth'
  Example:
  //WAIT EXEC PGM=WAIT,PARM='00001035'       wait 10.35 seconds

  b. Supressed form: HHMMSS, wait minimum 1 second
     HH: Hour
     MM: Minute
     SS: Seconds
  Syntax:
  //WAIT EXEC PGM=WAIT,PARM='HHMMSS'
  Example:
  //WAIT EXEC PGM=WAIT,PARM='000030'         wait 30 seconds

  c. Second form: SSSSS, wait minimum 1 second
     SSSSS: variable number range from 1 to 99999 seconds
  Syntax:
  //WAIT EXEC PGM=WAIT,PARM='sssss'
  Example:
  //WAIT EXEC PGM=WAIT,PARM=3600             wait 3600 seconds (1 hour)

  2. WTO and WTOH
  Send WTO messages (normal or highlighted) to console
  The message can be given in either EXEC PARM or SYSIN DD.
    a. USING EXEC PARM.
       Send messages supplied in EXEC PARM to console.
       This is the primary choice.
       Sample JCL:

    //WTOMSG EXEC PGM=WTO,    issue normal WTO message
    //    PARM='Hello, this is a test WTO message.'
    //WTOH   EXEC PGM=WTOH,   issue high lighted message
    //    PARM='System is IPLed, TSO user can logon on now.'

    b. USING SYSIN DD
       Send messages supplied in SYSIN DD to console.
       This is the secondary choice. When there is any EXEC PARM
       SYSIN DD will be ignored.
       The SYSIN DD must be record length of 80
       The maximum lines is defined at compile time.
       Sample JCL:

    //WTOMSG EXEC PGM=WTO
    //SYSIN DD *
    This is a test WTO message line 1.
    This is a test WTO message line 2.
    ...
    /*

Questions & suggestions
=======================
 Should you have any question, please contact Hunter Zhou at
 zhough2000@yahoo.com

 April, 2003

 Hunter Guanghui Zhou
 Phone: 1-(416)-602-9567
 E-mail: zhough2000@yahoo.com
